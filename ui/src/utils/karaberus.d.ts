/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/kara": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post API kara */
        post: operations["post-api-kara"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kara/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API kara by ID */
        get: operations["get-api-kara-by-id"];
        put?: never;
        post?: never;
        /** Delete API kara by ID */
        delete: operations["delete-api-kara-by-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kara/{id}/upload/{filetype}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Put API kara by ID upload by filetype */
        put: operations["put-api-kara-by-id-upload-by-filetype"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/oidc_discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API oidc discovery */
        get: operations["get-api-oidc-discovery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/artist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags artist */
        get: operations["get-api-tags-artist"];
        put?: never;
        /** Post API tags artist */
        post: operations["post-api-tags-artist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/artist/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags artist by ID */
        get: operations["get-api-tags-artist-by-id"];
        put?: never;
        post?: never;
        /** Delete API tags artist by ID */
        delete: operations["delete-api-tags-artist-by-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List API tags audio */
        get: operations["list-api-tags-audio"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/author": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags author */
        get: operations["get-api-tags-author"];
        put?: never;
        /** Post API tags author */
        post: operations["post-api-tags-author"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/author/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags author by ID */
        get: operations["get-api-tags-author-by-id"];
        put?: never;
        post?: never;
        /** Delete API tags author by ID */
        delete: operations["delete-api-tags-author-by-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags media */
        get: operations["get-api-tags-media"];
        put?: never;
        /** Post API tags media */
        post: operations["post-api-tags-media"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API tags media by ID */
        get: operations["get-api-tags-media-by-id"];
        put?: never;
        post?: never;
        /** Delete API tags media by ID */
        delete: operations["delete-api-tags-media-by-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags/video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List API tags video */
        get: operations["list-api-tags-video"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post API token */
        post: operations["post-api-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete API token by token */
        delete: operations["delete-api-token-by-token"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AdditionalName: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        Artist: {
            AdditionalNames: components["schemas"]["AdditionalName"][];
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        ArtistOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ArtistOutputBody.json
             */
            readonly $schema?: string;
            artist: components["schemas"]["Artist"];
        };
        AudioTag: {
            ID: string;
            Name: string;
        };
        AudioTagDB: {
            ID: string;
        };
        AuthorOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/AuthorOutputBody.json
             */
            readonly $schema?: string;
        };
        CheckKaraOutput: {
            Instrumental: components["schemas"]["CheckS3FileOutput"];
            Subtitles: components["schemas"]["CheckS3FileOutput"];
            Video: components["schemas"]["CheckS3FileOutput"];
        };
        CheckS3FileOutput: {
            /**
             * @description true if file passed all checks
             * @example true
             */
            passed: boolean;
        };
        CreateArtistInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/CreateArtistInputBody.json
             */
            readonly $schema?: string;
            additional_names: string[];
            name: string;
        };
        CreateAuthorInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/CreateAuthorInputBody.json
             */
            readonly $schema?: string;
            additional_names: string[];
            name: string;
        };
        CreateMediaInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/CreateMediaInputBody.json
             */
            readonly $schema?: string;
            /** @example [] */
            additional_names: string[];
            /** @example ANIME */
            media_type: string;
            /** @example Shinseiki Evangelion */
            name: string;
        };
        CreateTokenInputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/CreateTokenInputBody.json
             */
            readonly $schema?: string;
            admin: boolean;
            kara: boolean;
            read_only: boolean;
            user: boolean;
        };
        CreateTokenOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/CreateTokenOutputBody.json
             */
            readonly $schema?: string;
            token: string;
        };
        DeleteTokenOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/DeleteTokenOutputBody.json
             */
            readonly $schema?: string;
            /** @example Token 123 deleted. */
            message: string;
        };
        DeletedAt: {
            /** Format: date-time */
            Time: string;
            Valid: boolean;
        };
        ErrorDetail: {
            /** @description Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id' */
            location?: string;
            /** @description Error message text */
            message?: string;
            /** @description The value at the given location */
            value?: unknown;
        };
        ErrorModel: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/ErrorModel.json
             */
            readonly $schema?: string;
            /**
             * @description A human-readable explanation specific to this occurrence of the problem.
             * @example Property foo is required but is missing.
             */
            detail?: string;
            /** @description Optional list of individual error details */
            errors?: components["schemas"]["ErrorDetail"][];
            /**
             * Format: uri
             * @description A URI reference that identifies the specific occurrence of the problem.
             * @example https://example.com/error-log/abc123
             */
            instance?: string;
            /**
             * Format: int64
             * @description HTTP status code
             * @example 400
             */
            status?: number;
            /**
             * @description A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
             * @example Bad Request
             */
            title?: string;
            /**
             * Format: uri
             * @description A URI reference to human-readable documentation for the error.
             * @default about:blank
             * @example https://example.com/errors/example
             */
            type: string;
        };
        KaraInfo: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/KaraInfo.json
             */
            readonly $schema?: string;
            /** @example [
             *       1
             *     ] */
            artists: number[];
            /** @example [
             *       "Opening"
             *     ] */
            audio_tags: string[];
            /** @example [
             *       1
             *     ] */
            authors: number[];
            /** @example From https://youtu.be/dQw4w9WgXcQ */
            comment: string;
            medias: number[];
            /**
             * Format: int64
             * @example 0
             */
            song_order: number;
            /**
             * Format: int64
             * @example 1
             */
            source_media: number;
            /** @example Zankoku na Tenshi no These */
            title: string;
            /** @example [
             *       "A Cruel Angel's Thesis"
             *     ] */
            title_aliases: string[];
            /** @example iykyk */
            version: string;
            /** @example [
             *       "Opening"
             *     ] */
            video_tags: string[];
        };
        KaraInfoDB: {
            Artists: components["schemas"]["Artist"][];
            AudioTags: components["schemas"]["AudioTagDB"][];
            Authors: components["schemas"]["TimingAuthor"][];
            Comment: string;
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            ExtraTitles: components["schemas"]["AdditionalName"][];
            Hardsubbed: boolean;
            /** Format: int64 */
            ID: number;
            InstrumentalUploaded: boolean;
            Medias: components["schemas"]["MediaDB"][];
            /** Format: int64 */
            SongOrder: number;
            SourceMedia: components["schemas"]["MediaDB"];
            /** Format: int64 */
            SourceMediaID: number;
            SubtitlesUploaded: boolean;
            Title: string;
            /** Format: date-time */
            UpdatedAt: string;
            Version: string;
            VideoTags: components["schemas"]["VideoTagDB"][];
            VideoUploaded: boolean;
        };
        KaraOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/KaraOutputBody.json
             */
            readonly $schema?: string;
            Kara: components["schemas"]["KaraInfoDB"];
        };
        MediaDB: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            /** Format: date-time */
            UpdatedAt: string;
            /** @example ANIME */
            media_type: string;
            /** @example Shinseiki Evangelion */
            name: string;
        };
        MediaOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/MediaOutputBody.json
             */
            readonly $schema?: string;
            media: components["schemas"]["MediaDB"];
        };
        OIDCProviderDiscovery: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/OIDCProviderDiscovery.json
             */
            readonly $schema?: string;
            authorization_endpoint: string;
            client_id: string;
            issuer: string;
            jwks_uri: string;
            token_endpoint: string;
        };
        TimingAuthor: {
            /** Format: date-time */
            CreatedAt: string;
            DeletedAt: components["schemas"]["DeletedAt"];
            /** Format: int64 */
            ID: number;
            Name: string;
            /** Format: date-time */
            UpdatedAt: string;
        };
        UploadOutputBody: {
            /**
             * Format: uri
             * @description A URL to the JSON Schema for this object.
             * @example https://example.com/schemas/UploadOutputBody.json
             */
            readonly $schema?: string;
            check_results: components["schemas"]["CheckKaraOutput"];
            /**
             * @description karaoke ID
             * @example 1
             */
            file_id: string;
        };
        VideoTag: {
            ID: string;
            Name: string;
        };
        VideoTagDB: {
            ID: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "post-api-kara": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KaraInfo"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KaraOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-kara-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KaraOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-api-kara-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "put-api-kara-by-id-upload-by-filetype": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: string;
                /** @example video */
                filetype: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": Record<string, never>;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-oidc-discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OIDCProviderDiscovery"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-artist": {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtistOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-api-tags-artist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateArtistInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtistOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-artist-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ArtistOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-api-tags-artist-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "list-api-tags-audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AudioTag"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-author": {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-api-tags-author": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAuthorInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-author-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-api-tags-author-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-media": {
        parameters: {
            query?: {
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-api-tags-media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMediaInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "get-api-tags-media-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MediaOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-api-tags-media-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example 1 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "list-api-tags-video": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VideoTag"][];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "post-api-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTokenInputBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTokenOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
    "delete-api-token-by-token": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteTokenOutputBody"];
                };
            };
            /** @description Error */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ErrorModel"];
                };
            };
        };
    };
}
