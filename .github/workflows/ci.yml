name: Build and push image

on:
  push:
  pull_request:
    branches: ["master"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # supported build archs
  ARCHS: x86_64 aarch64

jobs:

  # TODO: for now the tests are built with CGO_ENABLED=0 (but it still tests s3/minio-go)
  linux_test:
    if: ${{ github.event_name != 'pull_request' || !startsWith(github.ref, 'refs/heads/renovate/') }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - uses: FedericoCarboni/setup-ffmpeg@v3
        with:
          ffmpeg-version: 7.0.1

      - name: install dependencies
        run: |
          pip install meson ninja

      - name: Setup S3 bucket
        run: podman run -d -e MINIO_DEFAULT_BUCKETS=karaberus -p 9000:9000 bitnami/minio:latest

      - name: Configure karaberus
        run: meson setup build -Dffmpeg:programs=disabled -Dffmpeg:tests=disabled -Dffmpeg:encoders=disabled -Dffmpeg:muxers=disabled -Dffmpeg:avfilter=disabled -Dffmpeg:avdevice=disabled -Dffmpeg:postproc=disabled -Dffmpeg:swresample=disabled -Dffmpeg:swscale=disabled -Dffmpeg:decoders=disabled -Dffmpeg:aac_decoder=enabled -Dffmpeg:aac_fixed_decoder=enabled -Dffmpeg:aac_latm_decoder=enabled -Derrcheck=false -Dstaticcheck=false

      - name: Run tests
        run: meson test -C build --verbose
        env:
          KARABERUS_S3_ENDPOINT: localhost:9000
          KARABERUS_S3_KEYID: minio
          KARABERUS_S3_SECRET: miniosecret

  test_no_native:
    if: ${{ github.event_name != 'pull_request' || !startsWith(github.ref, 'refs/heads/renovate/') }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest # arm64
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Install dependencies
        run: |
          pip install meson ninja

      - name: Configure karaberus
        run: meson setup build -Dno_native_deps=true -Ds3_tests=disabled

      - name: Run tests
        run: meson test -C build --verbose
        env:
          KARABERUS_S3_ENDPOINT: localhost:9000
          KARABERUS_S3_KEYID: minio
          KARABERUS_S3_SECRET: miniosecret

  build:
    if: ${{ github.event_name != 'pull_request' || !startsWith(github.ref, 'refs/heads/renovate/') }}
    runs-on: ubuntu-${{ matrix.config.ubuntu_version }}
    env:
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 500M

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        config:
          - arch: x86_64
            platform: linux/amd64
            target: ""
            ubuntu_version: "24.04"
          - arch: aarch64
            platform: linux/arm64
            target: "aarch64-linux-gnu"
            ubuntu_version: "24.04"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get time
        id: get_time
        run: echo "timestamp=`date +%s%N`" >> $GITHUB_OUTPUT

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ matrix.arch }}-${{ steps.get_time.outputs.timestamp }}
          restore-keys: ${{ matrix.config.arch }}-

      - uses: actions/setup-go@v5
        with:
          go-version: "stable"

      - name: Install dependencies
        run: |
          pipx install meson ninja
          sudo apt-get update
          sudo apt install ccache


      - name: Install crossbuild toolchain
        if: ${{ matrix.config.target != '' }}
        run: |
          sudo apt-get install g++-${{ matrix.config.target }} gcc-${{ matrix.config.target }} binutils-${{ matrix.config.target }} qemu-user-static

      - name: Build
        run: TARGET=${{ matrix.config.target }} ./ci/build.sh

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=schedule

      - name: Build image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          platforms: ${{ matrix.config.platform }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ github.sha }}-${{ matrix.config.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            UBUNTU_VERSION=${{ matrix.config.ubuntu_version }}
            TARGET=${{ matrix.config.arch }}-linux-gnu
          containerfiles: ci/Containerfile

      - name: Push image
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Save Cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ matrix.config.arch }}-${{ steps.get_time.outputs.timestamp }}

  push_manifest:
    needs: 
      - build
      - linux_test
      - test_no_native
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Podman login
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: create and push manifest for supported platforms
        run: |
          image_base_raw=${{ env.IMAGE_NAME }}
          image_base=${image_base_raw@L}
          image_base_sha=${image_base_raw@L}:${{ github.sha }}

          podman manifest create ${image_base}

          archs="${{ env.ARCHS }}"

          for arch in ${archs}; do
            podman pull ${{ env.REGISTRY }}/${image_base_sha}-${arch}
            podman manifest add ${image_base} ${{ env.REGISTRY }}/${image_base_sha}-${arch}
          done

          podman manifest push ${image_base} ${{ env.REGISTRY }}/${image_base_sha}

      - name: push branch manifest
        run: |
          image_base_raw=${{ env.IMAGE_NAME }}
          image_base=${image_base_raw@L}
          podman manifest push ${image_base} ${{ env.REGISTRY }}/${image_base}:${{ github.ref_name }}
