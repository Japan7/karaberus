name: Tauri

on:
  push:
    branches:
      - 'master'
      - 'renovate/*'
    tags:
      - 'app-v*'
  pull_request:
    branches:
      - 'master'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release-notes:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: generate release notes (tag)
        id: release_notes
        run: |
          notes="$(gh api -X POST /repos/${{ github.repository }}/releases/generate-notes -f tag_name=${{ github.ref_name }} | yq .body)"
          echo 'notes<<EOF' >> $GITHUB_OUTPUT
          echo 'A Flatpak repository is also available, see https://github.com/Japan7/karaberus-flatpak' >> $GITHUB_OUTPUT
          echo '' >> $GITHUB_OUTPUT
          echo "$notes" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      notes: ${{ steps.release_notes.outputs.notes }}

  build-tauri:
    needs: release-notes
    if: ${{ !startsWith(github.ref, 'refs/tags/') || always() }}

    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: aarch64-apple-darwin
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: x86_64-apple-darwin
          - platform: 'ubuntu-22.04'
            args: ''
            target: x86_64-unknown-linux-gnu
          - platform: 'windows-latest'
            args: ''
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v6
        with:
          node-version: lts/*
          cache: 'npm' # Set this to npm, yarn or pnpm.
          cache-dependency-path: ui/package-lock.json

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: set cargo home (Windows)
        if: ${{ startsWith(matrix.platform, 'windows') }}
        shell: bash
        run: |
          echo CARGO_HOME="D:\rust\cargo" >> $GITHUB_ENV

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: 'ui/src-tauri -> target'

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm ci # change this to npm or pnpm depending on which one you use.
        working-directory: ui

      - name: build and publish (tag)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        with:
          projectPath: ui
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: ${{ needs.release-notes.outputs.notes }}
          releaseDraft: true
          prerelease: false
          args: --config ./src-tauri/tauri.release.conf.json ${{ matrix.args }}

      - name: build (push)
        if: ${{ !startsWith(github.ref, 'refs/tags/') && (github.event_name != 'pull_request' || !startsWith(github.head_ref, 'renovate/')) }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        with:
          projectPath: ui
          args: ${{ matrix.args }}

      - name: upload artifact (push)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.target }}_release
          path: ui/src-tauri/target/**/release/bundle
